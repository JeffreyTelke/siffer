#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'rack'

options = {:Port => 8282, :Host => "0.0.0.0", :AccessLog => []}
server = nil
env = "development"
daemonize = false

opts = OptionParser.new("", 24, ' ') { |opts| 
  opts.banner = "Usage: sif [server name] [options]"

  opts.separator ""
  opts.separator "Sif options:"
  
  opts.on("-p", "--port PORT", "use PORT (default: 9292)") { |port|
    options[:Port] = port
  }
  
  opts.on("-E", "--env ENVIRONMENT", "use ENVIRONMENT for defaults (default: development)") { |e|
    env = e
  }
   
  opts.on("-D", "--daemonize", "run daemonized in the background (default: true)") { |d|
    daemonize = d ? true : false
  }
  
  opts.on_tail("-h", "--help", "Show this message") do
     puts opts
     exit
   end

   opts.on_tail("--version", "Show version") do
     puts "Siffer 0.0.1"
     exit
   end

   opts.parse! ARGV
}

if ARGV[0].nil?
  abort opts.to_s
end

inner_app = Rack::Builder.new {(
  require 'lib/server'
  use Rack::ShowExceptions
  run Siffer::Server.new
)}

begin 
  server = Rack::Handler::Mongrel
rescue
  server = Rack::Handler::WEBrick
end

case env
when "development"
  app = Rack::Builder.new {
    use Rack::CommonLogger, STDERR
    use Rack::ShowExceptions
    use Rack::Lint
    run inner_app
  }
  
when "deployment"
  app = Rack::Builder.new {
    user Rack::CommonLogger, STDERR
    run inner_app
  }
  
when "none"
  app = inner_app
end

if daemonize
  if RUBY_VERSION < "1.9"
    exit if fork
    Process.setsid
    exit if fork
    Dir.chdir "/"
    File.umask 0000
    STDIN.reopen "/dev/null"
    STDOUT.reopen "/dev/null", "a"
    STDERR.reopen "/dev/null", "a"
  else
    Process.daemon
  end
end

server.run app, options